Here's a detailed prompt you can provide to an AI app builder to create a similar Odoo-style invoice generator with the same color scheme:

---

**Project Requirements:** Create a professional invoice management system similar to Odoo's invoice module using Flask for backend and modern HTML/CSS for frontend. Maintain the exact purple gradient color scheme (#4f46e5 to #7c3aed) from the reference HTML.

**Key Features to Implement:**
1. **Three Main Pages:**
   - 📋 Create Invoice (with live preview)
   - 🏢 Company Settings (with local storage persistence)
   - 📚 Invoice History (with filtering/search)

2. **Visual Requirements:**
   - Purple gradient theme (#4f46e5 → #7c3aed) for headers/accents
   - Modern UI with:
     - Smooth animations (slide-in, hover effects)
     - Pulse animations for active elements
     - Radial background animations
     - Card-based layout with shadows
   - Fully responsive design (mobile-friendly)

3. **Core Functionality:**
   - Invoice creation with:
     - Client information section
     - Dynamic line items (add/remove)
     - Automatic calculations (subtotal/tax/total)
     - PDF generation/download
   - Company profile management
   - Invoice history tracking with:
     - Status badges (Paid/Pending/Overdue)
     - Search/filter capabilities
     - Statistics dashboard

4. **Technical Specifications:**
   - **Backend:** Flask application
   - **Frontend:**
     - HTML5 with Jinja2 templating
     - CSS3 (flexbox/grid animations)
     - JavaScript (localStorage for persistence)
   - **Libraries:** html2pdf.js for PDF generation
   - **Responsive:** Works on mobile/desktop

5. **File Structure:**
```
invoice-app/
├── static/
│   ├── css/
│   │   └── main.css (purple gradient styles)
│   └── js/
│       └── app.js (invoice logic)
├── templates/
│   ├── base.html
│   ├── create_invoice.html
│   ├── company_settings.html
│   └── invoice_history.html
├── app.py (Flask routes)
└── requirements.txt
```

6. **Color Palette to Maintain:**
   - Primary Gradient: `linear-gradient(135deg, #4f46e5 0%, #7c3aed 100%)`
   - Status Colors:
     - Paid: #d1fae5 (text: #065f46)
     - Pending: #fef3c7 (text: #92400e)
     - Overdue: #fecaca (text: #991b1b)
   - Background: `linear-gradient(135deg, #667eea 0%, #764ba2 100%)`

7. **Special UI Elements to Include:**
   - Animated section headers with pulse effect
   - Hover-triggered card elevation
   - Rotating radial background in header
   - Status badges with color coding
   - PDF preview panel
   - Statistics cards with large numbers

**Implementation Notes:**
1. Use localStorage for client-side data persistence
2. Implement live calculations as users add line items
3. Include the rotating radial background animation in header
4. Make sure all buttons have the hover effect (-2px Y translation)
5. Use the exact same status color coding system
6. Ensure mobile responsiveness with:
   - Column stacking on small screens
   - Adaptive form layouts
   - Touch-friendly buttons

**Example Code Snippet (Flask Route):**
```python
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def home():
    return render_template('create_invoice.html')

@app.route('/generate-pdf', methods=['POST'])
def generate_pdf():
    # PDF generation logic using html2pdf
    pass
```

---

This prompt maintains all visual elements from your reference HTML while structuring it into a proper Flask application. The AI should generate:
1. Complete CSS file with purple gradient theme
2. Jinja2 templates for each section
3. JavaScript for dynamic invoice calculations
4. Flask backend with storage handling
5. Responsive layout that works on mobile devices

The resulting application will have the same professional look as your reference HTML but organized as a production-ready Flask app with Odoo-like invoice management capabilities.